## Script para cuadrar los nombres de los genes, la info y las regiones de cada cromosoma
# en las 3 versiones de las anotaciones del genoma de TRIGO BLANDO.

## A partir del output del script "script Julian equivalencias detallado" -> equivalencias y funciones (ya esta hecha la correspondencia entre genes y funciones de las 3 versiones)

#cargar librerias necesarias
library(readr)
library(dplyr)
library(stringr)
library(datos)

#establecer el working directory
setwd("C:/Users/Elia/Desktop/genetica/anotacion_trigo_blando")

### ### cargo version 2.1 y la limpio
v2.1 <- read.delim("iwgsc_refseqv2.1_annotation_200916_HC.gff3", header = FALSE, skip = 1) #cargo el archivo GFF3
#quitar columnas que no me hagan falta -> v2, v6, v7, v8, es decir, selecciono la 1,3,4,5,9
v2.1  <- select(v2.1, c(1,3,4,5,9))
#nombres de las columnas - el mismo que le he dado a la anotacion de trigo duro
names(v2.1) <- c("Chr", "type", "Start", "End", "Info")
#subset solo de los genes
v2.1 <- v2.1[(v2.1$type == "gene"),]

### ### cargo las equivalencias y las funciones de la primera version 
# eq <- read.csv("equivalencias y funciones.txt", sep=";")
# #quito la columna gene.ID, is.repr y AHR quality code porque creo que no me hace falta
# eq$ID1.0 <- NULL
# eq$Gene.ID <- NULL
# eq$is_repr <- NULL
# eq$AHRD.Quality.Code <- NULL
# # hay filas que no tienen los valores de los genes de la version 2.1 porque ha cambiado de una version a otra
# # de momento quito las filas que tengan NA para los genes de la version 2.1 - repasar con Juli
# eq <- eq[!is.na(eq$ID2.1),]
# #quito las filas duplicadas (basicamente los genes repetidos)
# eq <- eq %>% group_by(ID2.1) %>% slice(1)
# ## compruebo que ya no hay duplicaciones:
# length(unique(eq$ID2.1)) == nrow(eq) # esto tiene que ser TRUE
# #le quito el .1, .2, .3 que tiene al final del ID del gen para que el nombre sea el mismo que en la v2.1
# for (i in 1:nrow(eq)){
#   print(i)
#   eq$ID2.1[i] <- gsub('\\.', '', substr(eq$ID2.1[i], 1, nchar(eq$ID2.1[i])-2))
# }
# write.table(eq , file= "equivalenciasYfunciones_LIMPIO.txt" ,sep="\t")

#puedo cargar el archivo de equivalencias y funciones limpio directamente:
eq <- read.delim("C:/Users/Elia/Desktop/genetica/anotacion_trigo_blando/equivalenciasYfunciones_LIMPIO.txt")

#creo el data frame donde juntar los genes de la ultima anotacion de trigo blando y la info de la primera version
merged <- data.frame(Chr = as.character(), type =as.character(), Start = as.character(), End= as.character(), Info = as.character())
# recorro la version 2.1 de la anotacion del genoma de trigo blando
for (i in 1:nrow(v2.1)){
  print(i) # para ver por donde va el bucle
  splitted <- str_split(v2.1$Info[i], ";")
  id <- substr(splitted[[1]][1],4,nchar(splitted[[1]][1])) #me quedo con la primera parte que es el ID del gen, que es lo que me interesa encontrar en el archivo de equivalencias y funciones
  #recorro el archivo de equivalencias y funciones
  for (j in 1:nrow(eq)){
    if (id == eq$ID2.1[j]){
      #si el ID esta en equivalencias, junto esa informacion
      new_info <- str_c(id, str_replace_na(eq$Blast.Hit.Accession[j], replacement = ""), str_replace_na(eq$Human.Readable.Description[j], replacement = ""), str_replace_na(eq$Pfam.IDs..Description.[j], replacement = ""), str_replace_na(eq$Interpro.IDs..Description.[j], replacement = ""), str_replace_na(eq$Gene.or.TE.TE..U..via.function.[j], replacement = ""), sep = ";")
      new_row <- data.frame(v2.1$Chr[i], v2.1$type[i], v2.1$Start[i], v2.1$End[i], new_info)
      names(new_row) = names(merged)
      merged <- rbind(merged, new_row)
    }
  }
}


#comprobar que no se repiten los genes y en algunos de manera aleatoria, que la correspondencia de la informacion es correcta
# revisar si hay NA y por que 
# revisar con juli como esta hecho lo de equivalencias y funciones - que errores puede haber o si no esta completo

write.table(merged , file= "v2.1_funciones_merged.txt" ,sep="\t")
